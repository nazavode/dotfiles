# shellcheck disable=SC2148
################################################################################
# Common stuff
################################################################################

EDITOR='vim'

LESS="${LESS} --quit-if-one-screen --no-init --raw-control-chars"

# dot executable (for PyCharm PlantUML plugin)
if command -v dot > /dev/null 2>&1; then
  GRAPHVIZ_DOT="$(command -v dot)"
fi

# Enforce locale to be consistent across systems
LC_ALL=en_US.UTF-8
LANG=en_US.UTF-8
LANGUAGE=en_US.UTF-8

################################################################################
# Detect OS
################################################################################

_os="$(uname 2> /dev/null)"

################################################################################
# Common utils
################################################################################

function _setup_go {
  # Setup Go environment.
  # Arguments:
  #   $1 : the GOPATH directory
  local gopath="$1"
  if [[ -d "$gopath" ]]; then
    # New Go doesn't require env vars anymore,
    # just make sure compiled binaries are
    # available:
    # GOPATH="$gopath"
    # GOBIN="${gopath}/bin"
    PATH="${gopath}/bin:$PATH"
  else
      (>&2 echo "[err] go is not available, specified GOPATH not found: '${gopath}'")
  fi
}

function _setup_cargo {
  # Setup rust+cargo environment.
  # Arguments:
  #   $1 : the cargo root directory
  local cargopath="$1"
  if [[ -d "$cargopath" ]]; then
    PATH="${cargopath}/bin:$PATH"
  else
      (>&2 echo "[err] cargo is not available, specified path not found: '${cargopath}'")
  fi
}

function _setup_homebrew {
    # Setup homebrew environment.
    # Arguments:
    #   $1 : the homebrew prefix path
    local brew_prefix="$1"
    if [[ -d "$brew_prefix" ]]; then
      PATH="${brew_prefix}/bin:${brew_prefix}/sbin:$PATH"
      INFOPATH="${brew_prefix}/share/info:$INFOPATH"
      XDG_DATA_DIRS="${brew_prefix}/share:$XDG_DATA_DIRS"
      # Add python commands installed by homebrew bottles
      PATH="${brew_prefix}/opt/python/libexec/bin:$PATH"
      # Update everything
      export PATH INFOPATH XDG_DATA_DIRS
      # Set MANPATH with care to avoid manpath warnings
      unset MANPATH
      MANPATH="${brew_prefix}/share/man:" # note the trailing ':'
    else
      (>&2 echo "[err] homebrew is not available, prefix not found: '${brew_prefix}'")
      return 1
    fi
  }

################################################################################
# Linux specific stuff
################################################################################

if [[ "$_os" = "Linux" ]]; then

  # Setup homebrew; the configuration varies between different systems
  if [[ -d /cineca/ ]]; then
    # We're on a production cluster
    CINECA=true
    CINECA_CLUSTER="${CINECA_CLUSTER:$(hostname -f | cut -d '.' -f 2)}"
    # On clusters is probably wise not to pull in homebrew automagically,
    # better to avoid possible issues with modules. Provide a lazy initializer
    # instead:
    function brewup {
      # Setup linuxbrew and make it available in the current shell.
      # This function takes no arguments.
      if command -v brew > /dev/null 2>&1; then
        (>&2 echo "[warn] homebrew is already available in the current env, skipping load")
        return 1
      fi
      # Move brew tmp if needed; usually set to dodge file system bugs
      if [[ -d "${CINECA_SCRATCH}" ]]; then
          export HOMEBREW_TEMP="${CINECA_SCRATCH}/.linuxbrew/tmp"    \
                 HOMEBREW_CACHE="${CINECA_SCRATCH}/.linuxbrew/cache" \
                 HOMEBREW_LOGS="${CINECA_SCRATCH}/.linuxbrew/logs"
          mkdir -p "${HOMEBREW_TEMP}"  \
                   "${HOMEBREW_CACHE}" \
                   "${HOMEBREW_LOGS}"
      fi
      # Pull in everything
      _setup_homebrew "${HOME}/.linuxbrew"
    }
  else
    # We're on a personal workstation; no workarounds (at least for now),
    # just pull in everything asap.
    _setup_homebrew "/home/linuxbrew/.linuxbrew"
  fi

  # Setup misc environments
  _setup_go "${HOME}/src/go"
  # _setup_cargo "${HOME}/.cargo"

  # Enable package suggestions
  if [[ -n "${ZSH}" && -f /etc/zsh_command_not_found ]]; then
    source /etc/zsh_command_not_found
  fi

  # Add .local stuff (e.g.: pip install --user)
  if [[ -d "${HOME}/.local/bin" ]]; then
    PATH="${HOME}/.local/bin:$PATH"
  fi
fi

################################################################################
# MacOSX specific stuff
################################################################################

if [[ "$_os" = "Darwin" ]]; then

  # GNU coreutils provided by brew, overwrite Apple counterparts
  if [[ -d "/usr/local/opt/coreutils/libexec/" ]]; then
    PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
    # Set MANPATH with care to avoid manpath warnings
    unset MANPATH
    export MANPATH="/usr/local/opt/coreutils/libexec/gnuman:" # note the trailing ':'
  fi

  # Setup misc environments
  _setup_go "${HOME}/Documents/Hacking/go"
  # _setup_cargo "${HOME}/.cargo"

  # Extra 'libexec' path needed by brewed go
  if [[ -d "/usr/local/opt/go/libexec/bin" ]]; then
    PATH="/usr/local/opt/go/libexec/bin:$PATH"
  fi
fi


################################################################################
# Setup ls for different systems
################################################################################

# Detect which `ls` flavor is in use, we need to use different flags
# for GNU ls and Apple/BSD ls.
# 1. Tell ls to use colors, fix found here:
#    https://github.com/mathiasbynens/dotfiles/pull/451
# 2. Tell GNU ls to not use quotes for file names containing spaces (-N)
#    since it is the default for the vanilla distro of coreutils
#    (and it is pretty annoying)
# Colors definition: LS_COLORS is used by GNU, LSCOLORS by Apple/BSD
# Solarized (https://github.com/seebi/dircolors-solarized/)
if ls --color > /dev/null 2>&1; then
  # GNU
  LS_COLORS='no=00:fi=00:di=01;31:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:'
  _ls_flags="--color -N"
else
  # Apple/BSD
  LSCOLORS='BxBxhxDxfxhxhxhxhxcxcx'
  _ls_flags="-G"
fi

################################################################################
# Exports
################################################################################

[[ -n "$EDITOR" ]]         && export EDITOR
[[ -n "$LESS" ]]           && export LESS
[[ -n "$LC_ALL" ]]         && export LC_ALL
[[ -n "$LANG" ]]           && export LANG
[[ -n "$LANGUAGE" ]]       && export LANGUAGE
[[ -n "$GRAPHVIZ_DOT" ]]   && export GRAPHVIZ_DOT
[[ -n "$PATH" ]]           && export PATH
[[ -n "$INFOPATH" ]]       && export INFOPATH
[[ -n "$XDG_DATA_DIRS" ]]  && export XDG_DATA_DIRS

[[ -n "$GOPATH" ]]         && export GOPATH
[[ -n "$GOBIN" ]]          && export GOBIN

[[ -n "$HOMEBREW_TEMP" ]]  && export HOMEBREW_TEMP

[[ -n "$CINECA" ]]         && export CINECA
[[ -n "$CINECA_CLUSTER" ]] && export CINECA_CLUSTER

[[ -n "$LS_COLORS" ]]      && export LS_COLORS
[[ -n "$LSCOLORS" ]]       && export LSCOLORS

################################################################################
# Aliases
# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
################################################################################

# shellcheck disable=SC2139
alias ls="ls ${_ls_flags}"
# shellcheck disable=SC2139
alias la="ls -ltrha ${_ls_flags}"
# shellcheck disable=SC2139
alias ll="ls -ltrh ${_ls_flags}"
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
# Detect if we are on ubuntu and set the 'xopen'
# console opener
if xdg-open --help > /dev/null 2>&1; then
    alias xopen='xdg-open'
fi

################################################################################
# Cleanup
################################################################################

unset _os
unset -f _setup_go
unset -f _setup_cargo
unset -f _setup_homebrew

